{
  "address": "0x33f453F45C95913E86E418DAf77d18606a2341F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Mytoken",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "claimReward__transferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "stake__transferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "staking__needMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "unstakeNot_called",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "waitingPeriod_notCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "withdraw__transferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timstamp",
          "type": "uint256"
        }
      ],
      "name": "WithdrewStake",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "RewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "StakersBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken",
      "outputs": [
        {
          "internalType": "contract Mytoken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unboundingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8a0f85f3fa5be618494c6945114e5efbfa75c68bcd702e23360ab5fb2c540958",
  "receipt": {
    "to": null,
    "from": "0x683F19Ce012A54D60c17F1107E4c05Fd5027b4aE",
    "contractAddress": "0x33f453F45C95913E86E418DAf77d18606a2341F0",
    "transactionIndex": 0,
    "gasUsed": "2374774",
    "logsBloom": "0x
    "blockHash": "0xf49c700890f41fe2faf7dbc23eab226fb0c7d02a8fc4d15177753b734042c0be",
    "transactionHash": "0x8a0f85f3fa5be618494c6945114e5efbfa75c68bcd702e23360ab5fb2c540958",
    "logs": [],
    "blockNumber": 162986420,
    "cumulativeGasUsed": "2374774",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4d2A311a9F1e5dD098489395d3FBd5b609d4f093"
  ],
  "numDeployments": 5,
  "solcInputHash": "22448bceb48d3273147fc14b6911aad8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claimReward__transferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"stake__transferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"staking__needMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"unstakeNot_called\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"waitingPeriod_notCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"withdraw__transferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timstamp\",\"type\":\"uint256\"}],\"name\":\"WithdrewStake\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"RewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakersBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken\",\"outputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unboundingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Mytoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\ncontract Mytoken is ERC20 {\\n    constructor() ERC20(\\\"xConflux\\\", \\\"xCFX\\\") {\\n    }\\n    \\n     function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n     function burn(address to,uint256 amount) external {\\n        _burn(to, amount);\\n    }\\n}\",\"keccak256\":\"0x866e920c80b2889def181e5a58eac3a0a3e4bf9979cf24cc65a750fea83b2570\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Mytoken.sol\\\";\\n// import \\\"./Token1.sol\\\";\\n\\ncontract Staking is ReentrancyGuard {\\n    Mytoken public myToken;\\n    //  MyToken public token;\\n    constructor(Mytoken _token) {\\n        myToken = _token;\\n    }\\n    event Staked(address indexed user, uint256 indexed amount);\\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timstamp);\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\n    uint256 public RewardRate=100;\\n    uint256 public s_totalSupply;\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public unboundingPeriod = 1e18;\\n    //   uint256 public withdrawTimeStamp;\\n\\n    mapping(address => uint256) s_userStakedAmount;\\n    mapping(address => uint256) s_rewards;\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\n    mapping(address => uint256) withdrawTimeStamp;\\n    mapping (address=>uint256) public StakersBalance;\\n    error stake__transferFailed();\\n    error withdraw__transferFailed();\\n    error claimReward__transferFailed();\\n    error staking__needMoreThanZero();\\n    error waitingPeriod_notCompleted();\\n     error unstakeNot_called();\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    modifier updateReward() {\\n        s_rewardPerTokenStored = rewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[msg.sender] = earned(msg.sender);\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\n        _;\\n    }\\n\\n    modifier needMoreThanZero() {\\n        if (msg.value == 0) {\\n            revert staking__needMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_userStakedAmount[account];\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n        return\\n            ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\n            pastRewards;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        }\\n        return\\n            s_rewardPerTokenStored +\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\n                s_totalSupply);\\n    }\\n\\n    function stake()\\n        public \\n        updateReward()\\n        needMoreThanZero()\\n        nonReentrant\\n        payable \\n    {   \\n        uint256 amount=msg.value;\\n        s_userStakedAmount[msg.sender] =\\n        s_userStakedAmount[msg.sender] +\\n            amount;\\n        s_totalSupply = s_totalSupply + amount;\\n          (bool sent, ) = (payable(address(this))).call{value: msg.value}(\\\"\\\");\\n        s_userStakedAmount[msg.sender]=msg.value;\\n        // StackingAmount=msg.value;\\n        require(sent, \\\"Failed to send Ether\\\");\\n        uint256 y=(93)*(msg.value)/100;\\n        myToken.mint(msg.sender, y);\\n        // emit event\\n        emit Staked(msg.sender, msg.value);\\n    }\\n\\n    uint256 public  unstakeTimestamp;\\n    function unstake(uint256 amount) public {\\n            require(s_userStakedAmount[msg.sender] >=0, \\\"No amount staked\\\");\\n            unstakeTimestamp=block.timestamp;\\n            unboundingPeriod=1000;\\n            emit WithdrewStake(msg.sender, amount, block.timestamp);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        external\\n        updateReward()\\n        // needMoreThanZero()\\n    {   if( unboundingPeriod!=1e18 && s_userStakedAmount[msg.sender]>=amount){\\n        withdrawTimeStamp[msg.sender] = block.timestamp;\\n        s_userStakedAmount[msg.sender] =\\n            s_userStakedAmount[msg.sender] -\\n            amount;\\n        s_totalSupply = s_totalSupply - amount;\\n        myToken.burn(msg.sender,amount);\\n        // emit WithdrewStake(msg.sender, amount);\\n        emit RewardsClaimed(msg.sender,amount);\\n        myToken.mint(msg.sender, (((amount * (1)) / 10) + amount));\\n    }\\n    else{\\n        revert unstakeNot_called();\\n    }\\n    }\\n}\\n\",\"keccak256\":\"0xae5d4913eca64ef5089600dcf45725d941ce0f2868482de98e708dbe35db81eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526064600255670de0b6b3a76400006006553480156200002257600080fd5b506040516200136638038062001366833981810160405281019062000048919062000116565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000148565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ca826200009d565b9050919050565b6000620000de82620000bd565b9050919050565b620000f081620000d1565b8114620000fc57600080fd5b50565b6000815190506200011081620000e5565b92915050565b6000602082840312156200012f576200012e62000098565b5b60006200013f84828501620000ff565b91505092915050565b61120e80620001586000396000f3fe6080604052600436106100c55760003560e01c80636aa0838f1161007f5780638a1833a5116100595780638a1833a514610250578063b8fcf9371461027b578063ccc23e52146102a6578063cd3daf9d146102d1576100cc565b80636aa0838f146101bd57806375edb325146101e8578063852b96c714610213576100cc565b80628cc262146100ce5780632e17de781461010b5780632e1a7d4d14610134578063304ac91b1461015d5780633a4b66f1146101885780636a74a0fc14610192576100cc565b366100cc57005b005b3480156100da57600080fd5b506100f560048036038101906100f09190610d98565b6102fc565b6040516101029190610dde565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190610e25565b610415565b005b34801561014057600080fd5b5061015b60048036038101906101569190610e25565b6104f0565b005b34801561016957600080fd5b5061017261089a565b60405161017f9190610dde565b60405180910390f35b6101906108a0565b005b34801561019e57600080fd5b506101a7610c1d565b6040516101b49190610dde565b60405180910390f35b3480156101c957600080fd5b506101d2610c23565b6040516101df9190610dde565b60405180910390f35b3480156101f457600080fd5b506101fd610c29565b60405161020a9190610dde565b60405180910390f35b34801561021f57600080fd5b5061023a60048036038101906102359190610d98565b610c2f565b6040516102479190610dde565b60405180910390f35b34801561025c57600080fd5b50610265610c47565b6040516102729190610dde565b60405180910390f35b34801561028757600080fd5b50610290610c4d565b60405161029d9190610eb1565b60405180910390f35b3480156102b257600080fd5b506102bb610c73565b6040516102c89190610dde565b60405180910390f35b3480156102dd57600080fd5b506102e6610c79565b6040516102f39190610dde565b60405180910390f35b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061038f610c79565b90506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080670de0b6b3a764000084846103eb9190610efb565b866103f69190610f2f565b6104009190610fa0565b61040a9190610fd1565b945050505050919050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90611062565b60405180910390fd5b42600c819055506103e860068190555042813373ffffffffffffffffffffffffffffffffffffffff167f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136760405160405180910390a450565b6104f8610c79565b6005819055504260048190555061050e336102fc565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a7640000600654141580156105f0575080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156108655742600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106849190610efb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806003546106d59190610efb565b600381905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401610738929190611091565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b50505050803373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193383600a6001866107fd9190610f2f565b6108079190610fa0565b6108119190610fd1565b6040518363ffffffff1660e01b815260040161082e929190611091565b600060405180830381600087803b15801561084857600080fd5b505af115801561085c573d6000803e3d6000fd5b50505050610897565b6040517f1f2dcc7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60055481565b6108a8610c79565b600581905550426004819055506108be336102fc565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003403610981576040517fe5fbc37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610989610cdc565b600034905080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109d99190610fd1565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600354610a2a9190610fd1565b60038190555060003073ffffffffffffffffffffffffffffffffffffffff1634604051610a56906110eb565b60006040518083038185875af1925050503d8060008114610a93576040519150601f19603f3d011682016040523d82523d6000602084013e610a98565b606091505b5050905034600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b179061114c565b60405180910390fd5b6000606434605d610b319190610f2f565b610b3b9190610fa0565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610b9a929190611091565b600060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b50505050343373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a3505050610c1b610d2b565b565b60035481565b60045481565b600c5481565b600b6020528060005260406000206000915090505481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60008060035403610c8e576005549050610cd9565b600354670de0b6b3a764000060025460045442610cab9190610efb565b610cb59190610f2f565b610cbf9190610f2f565b610cc99190610fa0565b600554610cd69190610fd1565b90505b90565b600260005403610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d18906111b8565b60405180910390fd5b6002600081905550565b6001600081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d6582610d3a565b9050919050565b610d7581610d5a565b8114610d8057600080fd5b50565b600081359050610d9281610d6c565b92915050565b600060208284031215610dae57610dad610d35565b5b6000610dbc84828501610d83565b91505092915050565b6000819050919050565b610dd881610dc5565b82525050565b6000602082019050610df36000830184610dcf565b92915050565b610e0281610dc5565b8114610e0d57600080fd5b50565b600081359050610e1f81610df9565b92915050565b600060208284031215610e3b57610e3a610d35565b5b6000610e4984828501610e10565b91505092915050565b6000819050919050565b6000610e77610e72610e6d84610d3a565b610e52565b610d3a565b9050919050565b6000610e8982610e5c565b9050919050565b6000610e9b82610e7e565b9050919050565b610eab81610e90565b82525050565b6000602082019050610ec66000830184610ea2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0682610dc5565b9150610f1183610dc5565b9250828203905081811115610f2957610f28610ecc565b5b92915050565b6000610f3a82610dc5565b9150610f4583610dc5565b9250828202610f5381610dc5565b91508282048414831517610f6a57610f69610ecc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fab82610dc5565b9150610fb683610dc5565b925082610fc657610fc5610f71565b5b828204905092915050565b6000610fdc82610dc5565b9150610fe783610dc5565b9250828201905080821115610fff57610ffe610ecc565b5b92915050565b600082825260208201905092915050565b7f4e6f20616d6f756e74207374616b656400000000000000000000000000000000600082015250565b600061104c601083611005565b915061105782611016565b602082019050919050565b6000602082019050818103600083015261107b8161103f565b9050919050565b61108b81610d5a565b82525050565b60006040820190506110a66000830185611082565b6110b36020830184610dcf565b9392505050565b600081905092915050565b50565b60006110d56000836110ba565b91506110e0826110c5565b600082019050919050565b60006110f6826110c8565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611136601483611005565b915061114182611100565b602082019050919050565b6000602082019050818103600083015261116581611129565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006111a2601f83611005565b91506111ad8261116c565b602082019050919050565b600060208201905081810360008301526111d181611195565b905091905056fea26469706673582212209f4f8bdd16bb4198fb835c3777969ea5b56f245d878e26306f73f4b7e8010af464736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100c55760003560e01c80636aa0838f1161007f5780638a1833a5116100595780638a1833a514610250578063b8fcf9371461027b578063ccc23e52146102a6578063cd3daf9d146102d1576100cc565b80636aa0838f146101bd57806375edb325146101e8578063852b96c714610213576100cc565b80628cc262146100ce5780632e17de781461010b5780632e1a7d4d14610134578063304ac91b1461015d5780633a4b66f1146101885780636a74a0fc14610192576100cc565b366100cc57005b005b3480156100da57600080fd5b506100f560048036038101906100f09190610d98565b6102fc565b6040516101029190610dde565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190610e25565b610415565b005b34801561014057600080fd5b5061015b60048036038101906101569190610e25565b6104f0565b005b34801561016957600080fd5b5061017261089a565b60405161017f9190610dde565b60405180910390f35b6101906108a0565b005b34801561019e57600080fd5b506101a7610c1d565b6040516101b49190610dde565b60405180910390f35b3480156101c957600080fd5b506101d2610c23565b6040516101df9190610dde565b60405180910390f35b3480156101f457600080fd5b506101fd610c29565b60405161020a9190610dde565b60405180910390f35b34801561021f57600080fd5b5061023a60048036038101906102359190610d98565b610c2f565b6040516102479190610dde565b60405180910390f35b34801561025c57600080fd5b50610265610c47565b6040516102729190610dde565b60405180910390f35b34801561028757600080fd5b50610290610c4d565b60405161029d9190610eb1565b60405180910390f35b3480156102b257600080fd5b506102bb610c73565b6040516102c89190610dde565b60405180910390f35b3480156102dd57600080fd5b506102e6610c79565b6040516102f39190610dde565b60405180910390f35b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061038f610c79565b90506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080670de0b6b3a764000084846103eb9190610efb565b866103f69190610f2f565b6104009190610fa0565b61040a9190610fd1565b945050505050919050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90611062565b60405180910390fd5b42600c819055506103e860068190555042813373ffffffffffffffffffffffffffffffffffffffff167f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136760405160405180910390a450565b6104f8610c79565b6005819055504260048190555061050e336102fc565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a7640000600654141580156105f0575080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156108655742600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106849190610efb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806003546106d59190610efb565b600381905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401610738929190611091565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b50505050803373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f193383600a6001866107fd9190610f2f565b6108079190610fa0565b6108119190610fd1565b6040518363ffffffff1660e01b815260040161082e929190611091565b600060405180830381600087803b15801561084857600080fd5b505af115801561085c573d6000803e3d6000fd5b50505050610897565b6040517f1f2dcc7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60055481565b6108a8610c79565b600581905550426004819055506108be336102fc565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003403610981576040517fe5fbc37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610989610cdc565b600034905080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109d99190610fd1565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600354610a2a9190610fd1565b60038190555060003073ffffffffffffffffffffffffffffffffffffffff1634604051610a56906110eb565b60006040518083038185875af1925050503d8060008114610a93576040519150601f19603f3d011682016040523d82523d6000602084013e610a98565b606091505b5050905034600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b179061114c565b60405180910390fd5b6000606434605d610b319190610f2f565b610b3b9190610fa0565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610b9a929190611091565b600060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b50505050343373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a3505050610c1b610d2b565b565b60035481565b60045481565b600c5481565b600b6020528060005260406000206000915090505481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60008060035403610c8e576005549050610cd9565b600354670de0b6b3a764000060025460045442610cab9190610efb565b610cb59190610f2f565b610cbf9190610f2f565b610cc99190610fa0565b600554610cd69190610fd1565b90505b90565b600260005403610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d18906111b8565b60405180910390fd5b6002600081905550565b6001600081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d6582610d3a565b9050919050565b610d7581610d5a565b8114610d8057600080fd5b50565b600081359050610d9281610d6c565b92915050565b600060208284031215610dae57610dad610d35565b5b6000610dbc84828501610d83565b91505092915050565b6000819050919050565b610dd881610dc5565b82525050565b6000602082019050610df36000830184610dcf565b92915050565b610e0281610dc5565b8114610e0d57600080fd5b50565b600081359050610e1f81610df9565b92915050565b600060208284031215610e3b57610e3a610d35565b5b6000610e4984828501610e10565b91505092915050565b6000819050919050565b6000610e77610e72610e6d84610d3a565b610e52565b610d3a565b9050919050565b6000610e8982610e5c565b9050919050565b6000610e9b82610e7e565b9050919050565b610eab81610e90565b82525050565b6000602082019050610ec66000830184610ea2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0682610dc5565b9150610f1183610dc5565b9250828203905081811115610f2957610f28610ecc565b5b92915050565b6000610f3a82610dc5565b9150610f4583610dc5565b9250828202610f5381610dc5565b91508282048414831517610f6a57610f69610ecc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fab82610dc5565b9150610fb683610dc5565b925082610fc657610fc5610f71565b5b828204905092915050565b6000610fdc82610dc5565b9150610fe783610dc5565b9250828201905080821115610fff57610ffe610ecc565b5b92915050565b600082825260208201905092915050565b7f4e6f20616d6f756e74207374616b656400000000000000000000000000000000600082015250565b600061104c601083611005565b915061105782611016565b602082019050919050565b6000602082019050818103600083015261107b8161103f565b9050919050565b61108b81610d5a565b82525050565b60006040820190506110a66000830185611082565b6110b36020830184610dcf565b9392505050565b600081905092915050565b50565b60006110d56000836110ba565b91506110e0826110c5565b600082019050919050565b60006110f6826110c8565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611136601483611005565b915061114182611100565b602082019050919050565b6000602082019050818103600083015261116581611129565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006111a2601f83611005565b91506111ad8261116c565b602082019050919050565b600060208201905081810360008301526111d181611195565b905091905056fea26469706673582212209f4f8bdd16bb4198fb835c3777969ea5b56f245d878e26306f73f4b7e8010af464736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1784,
        "contract": "contracts/Staking.sol:Staking",
        "label": "myToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Mytoken)941"
      },
      {
        "astId": 1818,
        "contract": "contracts/Staking.sol:Staking",
        "label": "RewardRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1820,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1822,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1824,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1827,
        "contract": "contracts/Staking.sol:Staking",
        "label": "unboundingPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1831,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userStakedAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1835,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1839,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardsPerToken_Paid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1843,
        "contract": "contracts/Staking.sol:Staking",
        "label": "withdrawTimeStamp",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1847,
        "contract": "contracts/Staking.sol:Staking",
        "label": "StakersBalance",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2075,
        "contract": "contracts/Staking.sol:Staking",
        "label": "unstakeTimestamp",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Mytoken)941": {
        "encoding": "inplace",
        "label": "contract Mytoken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
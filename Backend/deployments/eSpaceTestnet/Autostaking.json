{
  "address": "0x981Ba5DD3dFF971a462283C5833e5338caBceFF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Mytoken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract Mytoken1",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "contract Staking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract Restaking1",
          "name": "_restaking1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "autostaking",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTokensForStacker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken",
      "outputs": [
        {
          "internalType": "contract Mytoken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myToken1",
      "outputs": [
        {
          "internalType": "contract Mytoken1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restaking1",
      "outputs": [
        {
          "internalType": "contract Restaking1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1910a72d5f386f7505a787fb9bac30305b708794e8177ff9f530539376767d6",
  "receipt": {
    "to": null,
    "from": "0x683F19Ce012A54D60c17F1107E4c05Fd5027b4aE",
    "contractAddress": "0x981Ba5DD3dFF971a462283C5833e5338caBceFF2",
    "transactionIndex": 0,
    "gasUsed": "1364602",
    "logsBloom": "0x
    "blockHash": "0x754f2e40e9f4c8042854bf377011467a58c687215a7e81e4f87e2d6352e12849",
    "transactionHash": "0xe1910a72d5f386f7505a787fb9bac30305b708794e8177ff9f530539376767d6",
    "logs": [],
    "blockNumber": 162987915,
    "cumulativeGasUsed": "1364602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5b052A4ef37e5Bb53cfC689C2767f4a8Fc375084",
    "0x7e5d8f52054170b2f556d633cd76a207177Ec7fb",
    "0xEa7f8c0c39d5F9A5AcA465C6B083710De1917196",
    "0xc56108Dfc6D013C78e5E87fbA488ae19Bc2B8F2D"
  ],
  "numDeployments": 7,
  "solcInputHash": "44ae7f897f113e4974e695f9a555717f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract Mytoken1\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"contract Staking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract Restaking1\",\"name\":\"_restaking1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"autostaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokensForStacker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken\",\"outputs\":[{\"internalType\":\"contract Mytoken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myToken1\",\"outputs\":[{\"internalType\":\"contract Mytoken1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restaking1\",\"outputs\":[{\"internalType\":\"contract Restaking1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Autostaking.sol\":\"Autostaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Autostaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Mytoken.sol\\\";\\nimport \\\"./Mytoken1.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./Restaking1.sol\\\";\\n\\ncontract Autostaking {\\n    Mytoken public myToken;\\n    Mytoken1 public myToken1;\\n    Staking public staking;\\n    Restaking1 public restaking1;\\n\\n    constructor(\\n        Mytoken _token,\\n        Mytoken1 _token1,\\n        Staking _staking,\\n        Restaking1 _restaking1\\n    ) {\\n        myToken = _token;\\n        myToken1 = _token1;\\n        staking = _staking;\\n        restaking1 = _restaking1;\\n    }\\n\\n    // receive() external payable {}\\n    // fallback() external payable {}\\n    function autostaking() public payable {\\n        // Forward the received ether to the staking contract\\n        (bool success, ) = address(staking).call{value: msg.value / 2}(\\n            abi.encodeWithSignature(\\\"stake()\\\")\\n        );\\n        require(success, \\\"Staking failed\\\");\\n\\n        // Assuming ReStaking's stake function also requires ether\\n        (success, ) = address(restaking1).call{value: msg.value / 2}(\\n            abi.encodeWithSignature(\\\"transferTokens()\\\")\\n        );\\n        require(success, \\\"ReStaking failed\\\");\\n    }\\n\\n    function mintTokensForStacker(uint256 amount) public {\\n        myToken.mint(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1044066755cc937691388ecc7b578d8a9c08177709f4d924df846578c709f798\",\"license\":\"MIT\"},\"contracts/Mytoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\ncontract Mytoken is ERC20 {\\n    constructor() ERC20(\\\"xConflux\\\", \\\"xCFX\\\") {\\n    }\\n     function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n     function burn(address to,uint256 amount) external {\\n        _burn(to, amount);\\n    }\\n}\",\"keccak256\":\"0x1e7eed9f4df227aa3d0ca3c840c650017a78037f36ba19907fc72026b8538e6e\",\"license\":\"MIT\"},\"contracts/Mytoken1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\ncontract Mytoken1 is ERC20 {\\n    constructor() ERC20(\\\"lxConflux\\\", \\\"lxCFX\\\") {\\n    }\\n    \\n     function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n}\",\"keccak256\":\"0xa8e4aa7816cafd5faeaa92092c20d9b02192933b70200a8642e82720565ae084\",\"license\":\"MIT\"},\"contracts/Restaking1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Mytoken.sol\\\";\\nimport \\\"./Mytoken1.sol\\\";\\n\\ncontract Restaking1 {\\n    Mytoken public myToken;\\n    Mytoken1 public anotherToken;\\n     event Staked(address indexed user, uint256 indexed amount);\\n    event WithdrewStake(address indexed user, uint256 indexed amount);\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\n    uint256 public RewardRate=100;\\n    uint256 public s_totalSupply;\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public unboundingPeriod = 1e18;\\n    //   uint256 public withdrawTimeStamp;\\n\\n    mapping(address => uint256) s_userStakedAmount;\\n    mapping(address => uint256) s_rewards;\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\n    mapping(address => uint256) withdrawTimeStamp;\\n    mapping (address=>uint256) public StakersBalance;\\n\\n    modifier updateReward() {\\n        s_rewardPerTokenStored = rewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[msg.sender] = earned(msg.sender);\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\n        _;\\n    }\\n\\n    error stake__transferFailed();\\n    error withdraw__transferFailed();\\n    error claimReward__transferFailed();\\n    error staking__needMoreThanZero();\\n    error waitingPeriod_notCompleted();\\n     error unstakeNot_called();\\n\\n    constructor(Mytoken _myToken, Mytoken1 _anotherToken) {\\n        myToken = _myToken;\\n        anotherToken = _anotherToken;\\n    }\\n     function earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_userStakedAmount[account];\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n        return\\n            ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\n            pastRewards;\\n    }\\n\\n    function transferTokens(uint256 _amount) public  {\\n        s_userStakedAmount[msg.sender] =\\n        s_userStakedAmount[msg.sender] +\\n            _amount;\\n        s_totalSupply = s_totalSupply + _amount;\\n          myToken.mint(address(this), _amount);\\n        myToken.burn(msg.sender, _amount);\\n        anotherToken.mint(msg.sender, _amount);\\n    }\\n\\n     function rewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        }\\n        return\\n            s_rewardPerTokenStored +\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\n                s_totalSupply);\\n    }\\n\\n        uint256 public  unstakeTimestamp;\\n    function unstake(uint256 amount) public {\\n            require(s_userStakedAmount[msg.sender] >=0, \\\"No amount staked\\\");\\n            unstakeTimestamp=block.timestamp;\\n            unboundingPeriod=1000;\\n             emit WithdrewStake(msg.sender,  amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n    external\\n    updateReward()\\n        // needMoreThanZero()\\n    {   if( unboundingPeriod!=1e18){\\n        withdrawTimeStamp[msg.sender] = block.timestamp;\\n        s_userStakedAmount[msg.sender] =\\n            s_userStakedAmount[msg.sender] -\\n            amount;\\n        s_totalSupply = s_totalSupply - amount;\\n        emit RewardsClaimed(msg.sender, amount);\\n        myToken.mint(msg.sender, (((amount * (1)) / 10) + amount));\\n        myToken.burn(msg.sender,amount);\\n    }\\n    else{\\n        revert unstakeNot_called();\\n    }\\n    }\\n    function getAnotherTokenBalance() public  view returns (uint256) {\\n        return myToken.balanceOf(address(this));\\n    }\\n    function mintTokensForStacker(uint256 amount) public  {\\n            myToken.mint(msg.sender, amount);\\n    }\\n    function getTotalSupply() public view returns(uint256){\\n        return s_totalSupply;\\n    }\\n     function getRewardsPerTokenShared() public view returns(uint256){\\n        return s_rewardPerTokenStored;\\n    }\\n     function getUserBalance() public view returns(uint256){\\n        return s_userStakedAmount[msg.sender];\\n    }\\n\\n     function getUserRewardsPerToken() public view returns(uint256){\\n        return s_userRewardsPerToken_Paid[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x51462a8905f991a7959fbdf1605c302d42a97b547a26b916bbe68fd0062c81a4\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Mytoken.sol\\\";\\n// import \\\"./Token1.sol\\\";\\n\\ncontract Staking is ReentrancyGuard {\\n    Mytoken public myToken;\\n    //  MyToken public token;\\n    constructor(Mytoken _token) {\\n        myToken = _token;\\n    }\\n    event Staked(address indexed user, uint256 indexed amount);\\n    event WithdrewStake(address indexed user, uint256 indexed amount,uint256 indexed timstamp);\\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\\n    uint256 public RewardRate=100;\\n    uint256 public s_totalSupply;\\n    uint256 public s_lastUpdateTime; // everytime we call stake,withdraw,claim reward we need to update time;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public unboundingPeriod = 1e18;\\n    //   uint256 public withdrawTimeStamp;\\n\\n    mapping(address => uint256) s_userStakedAmount;\\n    mapping(address => uint256) s_rewards;\\n    mapping(address => uint256) s_userRewardsPerToken_Paid;\\n    mapping(address => uint256) withdrawTimeStamp;\\n    mapping (address=>uint256) public StakersBalance;\\n    error stake__transferFailed();\\n    error withdraw__transferFailed();\\n    error claimReward__transferFailed();\\n    error staking__needMoreThanZero();\\n    error waitingPeriod_notCompleted();\\n     error unstakeNot_called();\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    modifier updateReward() {\\n        s_rewardPerTokenStored = rewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[msg.sender] = earned(msg.sender);\\n        s_userRewardsPerToken_Paid[msg.sender] = s_rewardPerTokenStored;\\n        _;\\n    }\\n\\n    modifier needMoreThanZero() {\\n        if (msg.value == 0) {\\n            revert staking__needMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_userStakedAmount[account];\\n        uint256 amountPaid = s_userRewardsPerToken_Paid[account]; // used while claim reward function call\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n        return\\n            ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\n            pastRewards;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        }\\n        return\\n            s_rewardPerTokenStored +\\n            (((block.timestamp - s_lastUpdateTime) * RewardRate * 1e18) /\\n                s_totalSupply);\\n    }\\n\\n    function stake()\\n        public \\n        updateReward()\\n        needMoreThanZero()\\n        nonReentrant\\n        payable \\n    {   \\n        uint256 amount=msg.value;\\n        s_userStakedAmount[msg.sender] =\\n        s_userStakedAmount[msg.sender] +\\n            amount;\\n        s_totalSupply = s_totalSupply + amount;\\n          (bool sent, ) = (payable(address(this))).call{value: msg.value}(\\\"\\\");\\n        s_userStakedAmount[msg.sender]=msg.value;\\n        // StackingAmount=msg.value;\\n        require(sent, \\\"Failed to send Ether\\\");\\n        uint256 y=(93)*(msg.value)/100;\\n        myToken.mint(msg.sender, y);\\n        // emit event\\n        emit Staked(msg.sender, msg.value);\\n    }\\n\\n    uint256 public  unstakeTimestamp;\\n    function unstake(uint256 amount) public {\\n            require(s_userStakedAmount[msg.sender] >=0, \\\"No amount staked\\\");\\n            unstakeTimestamp=block.timestamp;\\n            unboundingPeriod=1000;\\n            emit WithdrewStake(msg.sender, amount, block.timestamp);\\n    }\\n\\n\\n    function withdraw(uint256 amount)\\n        external\\n        updateReward()\\n        // needMoreThanZero()\\n    {   if( unboundingPeriod!=1e18 && s_userStakedAmount[msg.sender]>=amount){\\n        withdrawTimeStamp[msg.sender] = block.timestamp;\\n        s_userStakedAmount[msg.sender] =\\n            s_userStakedAmount[msg.sender] -\\n            amount;\\n        s_totalSupply = s_totalSupply - amount;\\n        myToken.burn(msg.sender,amount);\\n        // emit WithdrewStake(msg.sender, amount);\\n        emit RewardsClaimed(msg.sender,amount);\\n        myToken.mint(msg.sender, (((amount * (1)) / 10) + amount));\\n    }\\n    else{\\n        revert unstakeNot_called();\\n    }\\n    }\\n\\n    function getTotalSupply() public view returns(uint256){\\n        return s_totalSupply;\\n    }\\n     function getRewardsPerTokenShared() public view returns(uint256){\\n        return s_rewardPerTokenStored;\\n    }\\n     function getUserBalance() public view returns(uint256){\\n        return s_userStakedAmount[msg.sender];\\n    }\\n\\n     function getUserRewardsPerToken() public view returns(uint256){\\n        return s_userRewardsPerToken_Paid[msg.sender];\\n    }\\n\\n    \\n}\\n\",\"keccak256\":\"0x2f888c53f6db2e58fc01a2a675be3bef7431331f8e798881185d502b027e7af0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000c6d38038062000c6d8339818101604052810190620000379190620002a5565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000317565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001768262000149565b9050919050565b60006200018a8262000169565b9050919050565b6200019c816200017d565b8114620001a857600080fd5b50565b600081519050620001bc8162000191565b92915050565b6000620001cf8262000169565b9050919050565b620001e181620001c2565b8114620001ed57600080fd5b50565b6000815190506200020181620001d6565b92915050565b6000620002148262000149565b9050919050565b6000620002288262000207565b9050919050565b6200023a816200021b565b81146200024657600080fd5b50565b6000815190506200025a816200022f565b92915050565b60006200026d8262000169565b9050919050565b6200027f8162000260565b81146200028b57600080fd5b50565b6000815190506200029f8162000274565b92915050565b60008060008060808587031215620002c257620002c162000144565b5b6000620002d287828801620001ab565b9450506020620002e587828801620001f0565b9350506040620002f88782880162000249565b92505060606200030b878288016200028e565b91505092959194509250565b61094680620003276000396000f3fe6080604052600436106100555760003560e01c80632d7c643e1461005a5780634bd989ca146100645780634cf088d91461008d578063b8fcf937146100b8578063d2ad6e8c146100e3578063eb1efe0a1461010e575b600080fd5b610062610139565b005b34801561007057600080fd5b5061008b60048036038101906100869190610559565b6103f8565b005b34801561009957600080fd5b506100a2610488565b6040516100af9190610605565b60405180910390f35b3480156100c457600080fd5b506100cd6104ae565b6040516100da9190610653565b60405180910390f35b3480156100ef57600080fd5b506100f86104d2565b604051610105919061068f565b60405180910390f35b34801561011a57600080fd5b506101236104f8565b60405161013091906106cb565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346101819190610715565b6040516024016040516020818303038152906040527f3a4b66f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161021191906107b7565b60006040518083038185875af1925050503d806000811461024e576040519150601f19603f3d011682016040523d82523d6000602084013e610253565b606091505b5050905080610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028e9061082b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346102dd9190610715565b6040516024016040516020818303038152906040527f1792b0bc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161036d91906107b7565b60006040518083038185875af1925050503d80600081146103aa576040519150601f19603f3d011682016040523d82523d6000602084013e6103af565b606091505b505080915050806103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec90610897565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016104539291906108e7565b600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b6000819050919050565b61053681610523565b811461054157600080fd5b50565b6000813590506105538161052d565b92915050565b60006020828403121561056f5761056e61051e565b5b600061057d84828501610544565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105cb6105c66105c184610586565b6105a6565b610586565b9050919050565b60006105dd826105b0565b9050919050565b60006105ef826105d2565b9050919050565b6105ff816105e4565b82525050565b600060208201905061061a60008301846105f6565b92915050565b600061062b826105b0565b9050919050565b600061063d82610620565b9050919050565b61064d81610632565b82525050565b60006020820190506106686000830184610644565b92915050565b600061067982610620565b9050919050565b6106898161066e565b82525050565b60006020820190506106a46000830184610680565b92915050565b60006106b582610620565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061072082610523565b915061072b83610523565b92508261073b5761073a6106e6565b5b828204905092915050565b600081519050919050565b600081905092915050565b60005b8381101561077a57808201518184015260208101905061075f565b60008484015250505050565b600061079182610746565b61079b8185610751565b93506107ab81856020860161075c565b80840191505092915050565b60006107c38284610786565b915081905092915050565b600082825260208201905092915050565b7f5374616b696e67206661696c6564000000000000000000000000000000000000600082015250565b6000610815600e836107ce565b9150610820826107df565b602082019050919050565b6000602082019050818103600083015261084481610808565b9050919050565b7f52655374616b696e67206661696c656400000000000000000000000000000000600082015250565b60006108816010836107ce565b915061088c8261084b565b602082019050919050565b600060208201905081810360008301526108b081610874565b9050919050565b60006108c282610586565b9050919050565b6108d2816108b7565b82525050565b6108e181610523565b82525050565b60006040820190506108fc60008301856108c9565b61090960208301846108d8565b939250505056fea264697066735822122064c7ea982f11826ffa5be21e6dc1cdcc5ce87e10500286437688b235efb9e11464736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80632d7c643e1461005a5780634bd989ca146100645780634cf088d91461008d578063b8fcf937146100b8578063d2ad6e8c146100e3578063eb1efe0a1461010e575b600080fd5b610062610139565b005b34801561007057600080fd5b5061008b60048036038101906100869190610559565b6103f8565b005b34801561009957600080fd5b506100a2610488565b6040516100af9190610605565b60405180910390f35b3480156100c457600080fd5b506100cd6104ae565b6040516100da9190610653565b60405180910390f35b3480156100ef57600080fd5b506100f86104d2565b604051610105919061068f565b60405180910390f35b34801561011a57600080fd5b506101236104f8565b60405161013091906106cb565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346101819190610715565b6040516024016040516020818303038152906040527f3a4b66f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161021191906107b7565b60006040518083038185875af1925050503d806000811461024e576040519150601f19603f3d011682016040523d82523d6000602084013e610253565b606091505b5050905080610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028e9061082b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166002346102dd9190610715565b6040516024016040516020818303038152906040527f1792b0bc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161036d91906107b7565b60006040518083038185875af1925050503d80600081146103aa576040519150601f19603f3d011682016040523d82523d6000602084013e6103af565b606091505b505080915050806103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec90610897565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016104539291906108e7565b600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b6000819050919050565b61053681610523565b811461054157600080fd5b50565b6000813590506105538161052d565b92915050565b60006020828403121561056f5761056e61051e565b5b600061057d84828501610544565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105cb6105c66105c184610586565b6105a6565b610586565b9050919050565b60006105dd826105b0565b9050919050565b60006105ef826105d2565b9050919050565b6105ff816105e4565b82525050565b600060208201905061061a60008301846105f6565b92915050565b600061062b826105b0565b9050919050565b600061063d82610620565b9050919050565b61064d81610632565b82525050565b60006020820190506106686000830184610644565b92915050565b600061067982610620565b9050919050565b6106898161066e565b82525050565b60006020820190506106a46000830184610680565b92915050565b60006106b582610620565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061072082610523565b915061072b83610523565b92508261073b5761073a6106e6565b5b828204905092915050565b600081519050919050565b600081905092915050565b60005b8381101561077a57808201518184015260208101905061075f565b60008484015250505050565b600061079182610746565b61079b8185610751565b93506107ab81856020860161075c565b80840191505092915050565b60006107c38284610786565b915081905092915050565b600082825260208201905092915050565b7f5374616b696e67206661696c6564000000000000000000000000000000000000600082015250565b6000610815600e836107ce565b9150610820826107df565b602082019050919050565b6000602082019050818103600083015261084481610808565b9050919050565b7f52655374616b696e67206661696c656400000000000000000000000000000000600082015250565b60006108816010836107ce565b915061088c8261084b565b602082019050919050565b600060208201905081810360008301526108b081610874565b9050919050565b60006108c282610586565b9050919050565b6108d2816108b7565b82525050565b6108e181610523565b82525050565b60006040820190506108fc60008301856108c9565b61090960208301846108d8565b939250505056fea264697066735822122064c7ea982f11826ffa5be21e6dc1cdcc5ce87e10500286437688b235efb9e11464736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 794,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "myToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Mytoken)941"
      },
      {
        "astId": 797,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "myToken1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Mytoken1)968"
      },
      {
        "astId": 800,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Staking)2267"
      },
      {
        "astId": 803,
        "contract": "contracts/Autostaking.sol:Autostaking",
        "label": "restaking1",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Restaking1)1427"
      }
    ],
    "types": {
      "t_contract(Mytoken)941": {
        "encoding": "inplace",
        "label": "contract Mytoken",
        "numberOfBytes": "20"
      },
      "t_contract(Mytoken1)968": {
        "encoding": "inplace",
        "label": "contract Mytoken1",
        "numberOfBytes": "20"
      },
      "t_contract(Restaking1)1427": {
        "encoding": "inplace",
        "label": "contract Restaking1",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)2267": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      }
    }
  }
}